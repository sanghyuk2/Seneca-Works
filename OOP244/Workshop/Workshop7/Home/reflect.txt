/**********************************************************
* Name: SangHyuk Lee
* Student ID: 129405171
* Seneca email: slee395@myseneca.ca
* Date of Completion: 7/17/2018
**********************************************************/
1. Does the Hero class need to know about the existence of the SuperHero class? (Hint: do a search in Hero.cpp, does the word SuperHero?appear anywhere?)
No it does not because as the SuperHero is the derived class from the Hero class, it is under level in terms of the hierarchy. It means it inherits the structure from the base class but not provide the information from the derived class to based one.

2. Does the SuperHero class need to know about the existence of the Hero class? (Hint: do a search in SuperHero.cpp, does the word Hero?appear anywhere?)
Yes. As I mentioned in the question #1, it inherits the structure of the Hero's. Therefore, it needs to know the existence of the Hero class.

3. The program prints out Ancient Battle!?when 2 Heroes fight. It prints out Super Fight!?when 2 SuperHeroes fight. When you tried to make a Hero fight a SuperHero, what did it print out?
It prints Ancient Battle!

4. True or False: are the following definitions for main valid? int main() { Hero("Achilles", 20, 6) * Hero("Hector", 30, 5); } 
how about this? int main() { (Hero("Achilles", 20, 6) * Hero("Hector", 30, 5)) * (Hero("Atalanta", 10, 3) * Hero("Hippolyta", 10, 2)); }

Both definitions are valid(true) and they should return the value in the forms of integer.



Quis 1 Reflection
Question 3
What is shadowing in the context of a derived class? How can we call a function that has been shadowed by another? Give an example of when shadowing would occur.
Shadowing in the context of a derived class means when the function in base and the derived class has the same identifier. When we call the function in derived class it shadows the base class' function.
If we want to call the function in base class, we need to specify where it is by using 'class_name::function_name();'

EX) class base {

void display();
}

class derived : public base {

void display();
}
